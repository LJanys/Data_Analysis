[
["problem-set-1.html", "Chapter 10 Problem Set 1 10.1 Estimating model parameters 10.2 Estimate \\(R^2\\) and \\(\\bar{R^2}\\) 10.3 Simulation study", " Chapter 10 Problem Set 1 The model used in the simulation has the following structure: \\[x_{i1}=1, x_{i2}:x_{i11} \\sim \\mathcal{N}(0,1)\\] \\[y_{i}=\\mathbf{x}_i&#39;\\boldsymbol{\\beta}+\\varepsilon\\] with \\(\\boldsymbol{\\beta}=\\left(\\begin{matrix} 1&amp;0.5 &amp;0&amp;0&amp; 0&amp; 0&amp; 0&amp; 0&amp; 0&amp; 0&amp; 0 \\end{matrix}\\right)\\) and \\(\\varepsilon \\sim \\mathcal{N}(0,1)\\) and \\(n=1000\\). 10.1 Estimating model parameters Calculate \\(\\hat{\\boldsymbol{\\beta}}\\), \\(\\hat{\\mathbf{y}}\\) and \\(\\hat{\\boldsymbol{\\varepsilon}}\\) and the standard errors of the coefficient estimates. Please try to program these entities yourself instead of using pre-specified functions in R. n=1000 M=10 ####Specify the DGP######## X&lt;-cbind(rep(1,n),matrix(rnorm(n*M,mean=0,sd=1), n, M)) eps&lt;-rnorm(n) beta.vec&lt;-c(1,0.5,rep(0,M-1)) y&lt;-X%*%beta.vec+eps ##Solving for beta hat### beta.hat &lt;- solve(t(X) %*% X) %*% t(X) %*% y beta.hat k&lt;-dim(X)[2] #####calculate the fitted values##### y.hat&lt;- X %*% beta.hat eps.hat&lt;-y-X %*% beta.hat ###calculate the covariance matrix# se&lt;-(t(eps.hat)%*%(eps.hat))/(n-k) cov&lt;-se[1]*solve(t(X) %*% X) d1&lt;-sqrt(diag(cov)) 10.2 Estimate \\(R^2\\) and \\(\\bar{R^2}\\) Calculate both the \\(R^2\\) and the adjusted \\(R^2\\) for one draw of the covariates and the full model specification. #Calculate the coefficient of determination# r_squared&lt;-sum((y.hat-mean(y.hat))^2)/sum((y-mean(y))^2) ##adjusted r squared r_squared.adj&lt;-r_squared-(k-1)/(n-k)*(1-r_squared) 10.3 Simulation study In a suitably designed simulation, show the behaviour of the \\(R^2\\) and the adjusted \\(R^2\\) when starting only with a constant and add covariates sequentially to the model. n=1000##number of observations in each simulation r=1000####Number of simulation runs m1=1:50 m=rep(m1,each=r) rep&lt;-length(m) adj.R&lt;-c() R.sq&lt;-c() for (i in 1:rep) { N=n M=m[i] X&lt;-cbind(rep(1,n),matrix(rnorm(N*M,mean=0,sd=1), N, M)) eps&lt;-rnorm(N) beta.vec&lt;-c(1,0.5,rep(0,M-1)) y&lt;-X%*%beta.vec+eps lm.result &lt;- lm(y~X) R.sq[i]&lt;-summary(lm(y~X))$r.squared adj.R[i]&lt;-summary(lm(y~X))$adj.r.squared print(i) } A&lt;-matrix(adj.R,r,length(m1)) B&lt;-matrix(R.sq,r,length(m1)) plot(colMeans(B),type=&quot;l&quot;,ylim=c(min(colMeans(A)),max(colMeans(B)))) lines(colMeans(A),col=&quot;red&quot;,lty=2) "]
]
